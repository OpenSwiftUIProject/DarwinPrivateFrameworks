// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64e-apple-macos15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -Osize -enable-upcoming-feature InternalImportsByDefault -enable-experimental-feature Extern -module-name AttributeGraph -package-name OpenGraph
// swift-module-flags-ignorable: -interface-compiler-version 6.1
@_exported public import AttributeGraph
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
extension AnyAttribute {
  public init<Value>(_ attribute: AttributeGraph.Attribute<Value>)
  public func unsafeCast<Value>(to _: Value.Type) -> AttributeGraph.Attribute<Value>
  public static var current: AnyAttribute? {
    get
  }
  public func unsafeOffset(at offset: Swift.Int) -> AnyAttribute
  public func setFlags(_ newFlags: AnyAttribute.Flags, mask: AnyAttribute.Flags)
  public func addInput(_ attribute: AnyAttribute, options: AGInputOptions = [], token: Swift.Int)
  public func addInput<Value>(_ attribute: AttributeGraph.Attribute<Value>, options: AGInputOptions = [], token: Swift.Int)
  public func visitBody<Body>(_ visitor: inout Body) where Body : AttributeGraph.AttributeBodyVisitor
  public func mutateBody<Value>(as type: Value.Type, invalidating: Swift.Bool, _ body: (inout Value) -> Swift.Void)
  public func breadthFirstSearch(options _: SearchOptions = [], _: (AnyAttribute) -> Swift.Bool) -> Swift.Bool
  public var _bodyType: any Any.Type {
    get
  }
  public var _bodyPointer: Swift.UnsafeRawPointer {
    get
  }
  public var valueType: any Any.Type {
    get
  }
  public var indirectDependency: AnyAttribute? {
    get
    nonmutating set
  }
}
extension AnyAttribute : Swift.CustomStringConvertible {
  @inlinable public var description: Swift.String {
    get { "#\(rawValue)" }
  }
}
public typealias AttributeUpdateBlock = () -> (Swift.UnsafeMutableRawPointer, AnyAttribute) -> Swift.Void
@frozen @propertyWrapper @dynamicMemberLookup public struct Attribute<Value> {
  public var identifier: AnyAttribute
  public init(identifier: AnyAttribute)
  public init(_ attribute: AttributeGraph.Attribute<Value>)
  public init(value: Value)
  public init(type _: Value.Type)
  public init<Body>(body: Swift.UnsafePointer<Body>, value: Swift.UnsafePointer<Value>?, flags: _AttributeType.Flags = [], update: () -> (Swift.UnsafeMutableRawPointer, AnyAttribute) -> Swift.Void) where Body : AttributeGraph._AttributeBody
  public var wrappedValue: Value {
    unsafeAddress
    nonmutating set
  }
  public var projectedValue: AttributeGraph.Attribute<Value> {
    get
    set
  }
  public subscript<Member>(dynamicMember keyPath: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member> {
    get
  }
  public subscript<Member>(keyPath keyPath: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member> {
    get
  }
  public subscript<Member>(offset body: (inout Value) -> AttributeGraph.PointerOffset<Value, Member>) -> AttributeGraph.Attribute<Member> {
    get
  }
  public func unsafeCast<V>(to type: V.Type) -> AttributeGraph.Attribute<V>
  public func unsafeOffset<Member>(at offset: Swift.Int, as _: Member.Type) -> AttributeGraph.Attribute<Member>
  public func applying<Member>(offset: AttributeGraph.PointerOffset<Value, Member>) -> AttributeGraph.Attribute<Member>
  public func visitBody<Body>(_ visitor: inout Body) where Body : AttributeGraph.AttributeBodyVisitor
  public func mutateBody<V>(as type: V.Type, invalidating: Swift.Bool, _ body: (inout V) -> Swift.Void)
  public func breadthFirstSearch(options: SearchOptions = [], _ body: (AnyAttribute) -> Swift.Bool) -> Swift.Bool
  public var graph: Graph {
    get
  }
  public var subgraph: Subgraph {
    get
  }
  public var value: Value {
    unsafeAddress
    nonmutating set
  }
  public var valueState: ValueState {
    get
  }
  public func valueAndFlags(options: AGValueOptions = []) -> (value: Value, flags: AGChangedValueFlags)
  public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Swift.Bool)
  public func setValue(_ value: Value) -> Swift.Bool
  public var hasValue: Swift.Bool {
    get
  }
  public func updateValue()
  public func prefetchValue()
  public func invalidateValue()
  public func validate()
  public func addInput(_ attribute: AnyAttribute, options: AGInputOptions = [], token: Swift.Int)
  public func addInput<V>(_ attribute: AttributeGraph.Attribute<V>, options: AGInputOptions = [], token: Swift.Int)
  public typealias Flags = AnyAttribute.Flags
  public var flags: AttributeGraph.Attribute<Value>.Flags {
    get
    nonmutating set
  }
  public func setFlags(_ newFlags: AttributeGraph.Attribute<Value>.Flags, mask: AttributeGraph.Attribute<Value>.Flags)
}
extension AttributeGraph.Attribute : Swift.Hashable {
  public static func == (a: AttributeGraph.Attribute<Value>, b: AttributeGraph.Attribute<Value>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AttributeGraph.Attribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AttributeGraph.Attribute {
  public init<R>(_ rule: R) where Value == R.Value, R : AttributeGraph.Rule
  public init<R>(_ rule: R) where Value == R.Value, R : AttributeGraph.StatefulRule
}
@_silgen_name("AGGraphCreateAttribute")
@inline(__always) @inlinable internal func AGGraphCreateAttribute(index: Swift.Int, body: Swift.UnsafeRawPointer, value: Swift.UnsafeRawPointer?) -> AnyAttribute
@_silgen_name("AGGraphGetValue")
@inline(__always) @inlinable internal func AGGraphGetValue<Value>(_ attribute: AnyAttribute, options: AGValueOptions = [], type: Value.Type = Value.self) -> AGValue
@_silgen_name("AGGraphSetValue")
@inline(__always) @inlinable internal func AGGraphSetValue<Value>(_ attribute: AnyAttribute, valuePointer: Swift.UnsafePointer<Value>) -> Swift.Bool
@frozen public struct External<Value> {
  public init()
}
extension AttributeGraph.External : AttributeGraph._AttributeBody {
  public static var comparisonMode: ComparisonMode {
    get
  }
  public static var flags: AttributeGraph.External<Value>.Flags {
    get
  }
  public static func _update(_: Swift.UnsafeMutableRawPointer, attribute _: AnyAttribute)
}
extension AttributeGraph.External : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@frozen public struct PointerOffset<Base, Member> {
  public var byteOffset: Swift.Int
  public init(byteOffset: Swift.Int)
}
extension AttributeGraph.PointerOffset {
  public static func + <A>(lhs: AttributeGraph.PointerOffset<Base, A>, rhs: AttributeGraph.PointerOffset<A, Member>) -> AttributeGraph.PointerOffset<Base, Member>
}
extension AttributeGraph.PointerOffset {
  public static func invalidScenePointer() -> Swift.UnsafeMutablePointer<Base>
  public static func of(_ member: inout Member) -> AttributeGraph.PointerOffset<Base, Member>
  public static func offset(_ body: (inout Base) -> AttributeGraph.PointerOffset<Base, Member>) -> AttributeGraph.PointerOffset<Base, Member>
}
extension AttributeGraph.PointerOffset where Base == Member {
  public init()
}
extension Swift.UnsafePointer {
  public subscript<Member>(offset offset: AttributeGraph.PointerOffset<Pointee, Member>) -> Member {
    unsafeAddress
  }
  public static func + <Member>(lhs: Swift.UnsafePointer<Pointee>, rhs: AttributeGraph.PointerOffset<Pointee, Member>) -> Swift.UnsafePointer<Member>
}
extension Swift.UnsafeMutablePointer {
  public subscript<Member>(offset offset: AttributeGraph.PointerOffset<Pointee, Member>) -> Member {
    unsafeAddress
    nonmutating unsafeMutableAddress
  }
  public static func + <Member>(lhs: Swift.UnsafeMutablePointer<Pointee>, rhs: AttributeGraph.PointerOffset<Pointee, Member>) -> Swift.UnsafeMutablePointer<Member>
}
public protocol _AttributeBody {
  static func _destroySelf(_ pointer: Swift.UnsafeMutableRawPointer)
  static var _hasDestroySelf: Swift.Bool { get }
  static func _updateDefault(_ pointer: Swift.UnsafeMutableRawPointer)
  static var comparisonMode: ComparisonMode { get }
  typealias Flags = _AttributeType.Flags
  static var flags: Self.Flags { get }
}
extension AttributeGraph._AttributeBody {
  public static func _destroySelf(_ pointer: Swift.UnsafeMutableRawPointer)
  public static var _hasDestroySelf: Swift.Bool {
    get
  }
  public static func _updateDefault(_ pointer: Swift.UnsafeMutableRawPointer)
  public static var comparisonMode: ComparisonMode {
    get
  }
  public static var flags: Self.Flags {
    get
  }
}
public protocol AttributeBodyVisitor {
  func visit<Body>(body: Swift.UnsafePointer<Body>) where Body : AttributeGraph._AttributeBody
}
public protocol ObservedAttribute : AttributeGraph._AttributeBody {
  mutating func destroy()
}
extension AttributeGraph.ObservedAttribute {
  public static func _destroySelf(_ pointer: Swift.UnsafeMutableRawPointer)
  public static var _hasDestroySelf: Swift.Bool {
    get
  }
}
@frozen @propertyWrapper @dynamicMemberLookup public struct IndirectAttribute<Value> {
  public let identifier: AnyAttribute
  public init(source: AttributeGraph.Attribute<Value>)
  public var source: AttributeGraph.Attribute<Value> {
    get
    nonmutating set
  }
  public var dependency: AnyAttribute? {
    get
    nonmutating set
  }
  public var value: Value {
    get
    nonmutating set
    nonmutating _modify
  }
  public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Swift.Bool)
  public var wrappedValue: Value {
    get
    nonmutating set
    nonmutating _modify
  }
  public var projectedValue: AttributeGraph.Attribute<Value> {
    get
  }
  public subscript<Member>(dynamicMember keyPath: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member> {
    get
  }
}
extension AttributeGraph.IndirectAttribute : Swift.Hashable {
  public static func == (a: AttributeGraph.IndirectAttribute<Value>, b: AttributeGraph.IndirectAttribute<Value>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyOptionalAttribute {
  public var identifier: AnyAttribute
  public init()
  public init(_ attribute: AnyAttribute)
  public init(_ attribute: AnyAttribute?)
  public init<Value>(_ attribute: AttributeGraph.OptionalAttribute<Value>)
  public static var current: AttributeGraph.AnyOptionalAttribute {
    get
  }
  public var attribute: AnyAttribute? {
    get
    set
  }
  public func map<Value>(_ body: (AnyAttribute) -> Value) -> Value?
  public func unsafeCast<Value>(to _: Value.Type) -> AttributeGraph.OptionalAttribute<Value>
}
extension AttributeGraph.AnyOptionalAttribute : Swift.Hashable {
  public static func == (a: AttributeGraph.AnyOptionalAttribute, b: AttributeGraph.AnyOptionalAttribute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AttributeGraph.AnyOptionalAttribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@frozen @propertyWrapper @dynamicMemberLookup public struct OptionalAttribute<Value> {
  public var base: AttributeGraph.AnyOptionalAttribute
  public init()
  public init(base: AttributeGraph.AnyOptionalAttribute)
  public init(_ attribute: AttributeGraph.Attribute<Value>)
  public init(_ attribute: AttributeGraph.Attribute<Value>?)
  public init(_ weakAttribute: AttributeGraph.WeakAttribute<Value>)
  public var attribute: AttributeGraph.Attribute<Value>? {
    get
    set
  }
  public var value: Value? {
    get
  }
  public func changedValue(options: AGValueOptions = []) -> (value: Value, changed: Swift.Bool)?
  public func map<V>(_ body: (AttributeGraph.Attribute<Value>) -> V) -> V?
  public var wrappedValue: Value? {
    get
  }
  public var projectedValue: AttributeGraph.Attribute<Value>? {
    get
    set
    _modify
  }
  public subscript<Member>(dynamicMember keyPath: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member>? {
    get
  }
}
extension AttributeGraph.OptionalAttribute : Swift.Hashable {
  public static func == (a: AttributeGraph.OptionalAttribute<Value>, b: AttributeGraph.OptionalAttribute<Value>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AttributeGraph.OptionalAttribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@frozen public struct Focus<Root, Value> : AttributeGraph.Rule, Swift.CustomStringConvertible {
  public var root: AttributeGraph.Attribute<Root>
  public var keyPath: Swift.KeyPath<Root, Value>
  public init(root: AttributeGraph.Attribute<Root>, keyPath: Swift.KeyPath<Root, Value>)
  public var value: Value {
    get
  }
  public static var flags: AttributeGraph.Focus<Root, Value>.Flags {
    get
  }
  public var description: Swift.String {
    get
  }
}
@frozen public struct Map<Source, Value> : AttributeGraph.Rule, Swift.CustomStringConvertible {
  public var arg: AttributeGraph.Attribute<Source>
  public let body: (Source) -> Value
  public init(_ arg: AttributeGraph.Attribute<Source>, _ body: @escaping (Source) -> Value)
  public var value: Value {
    get
  }
  public static var flags: AttributeGraph.Map<Source, Value>.Flags {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol Rule : AttributeGraph._AttributeBody {
  associatedtype Value
  static var initialValue: Self.Value? { get }
  var value: Self.Value { get }
}
extension AttributeGraph.Rule {
  public static var initialValue: Self.Value? {
    get
  }
  public static func _update(_ pointer: Swift.UnsafeMutableRawPointer, attribute _: AnyAttribute)
  public static func _updateDefault(_: Swift.UnsafeMutableRawPointer)
}
extension AttributeGraph.Rule {
  public var attribute: AttributeGraph.Attribute<Self.Value> {
    get
  }
  public var context: AttributeGraph.RuleContext<Self.Value> {
    get
  }
}
extension AttributeGraph.Rule where Self : Swift.Hashable {
  public func cachedValue(options: AGCachedValueOptions = [], owner: AnyAttribute?) -> Self.Value
  public func cachedValueIfExists(options: AGCachedValueOptions = [], owner: AnyAttribute?) -> Self.Value?
  public static func _cachedValue(options: AGCachedValueOptions = [], owner: AnyAttribute?, hashValue: Swift.Int, bodyPtr: Swift.UnsafeRawPointer, update: () -> (Swift.UnsafeMutableRawPointer, AnyAttribute) -> Swift.Void) -> Swift.UnsafePointer<Self.Value>
}
public protocol StatefulRule : AttributeGraph._AttributeBody {
  associatedtype Value
  static var initialValue: Self.Value? { get }
  mutating func updateValue()
}
extension AttributeGraph.StatefulRule {
  public static var initialValue: Self.Value? {
    get
  }
  public static func _update(_ pointer: Swift.UnsafeMutableRawPointer, attribute _: AnyAttribute)
  public static func _updateDefault(_: Swift.UnsafeMutableRawPointer)
}
extension AttributeGraph.StatefulRule {
  public var attribute: AttributeGraph.Attribute<Self.Value> {
    get
  }
  public var context: AttributeGraph.RuleContext<Self.Value> {
    get
  }
  public var value: Self.Value {
    unsafeAddress
    nonmutating set
  }
  public var hasValue: Swift.Bool {
    get
  }
}
@frozen public struct AnyRuleContext : Swift.Equatable {
  public var attribute: AnyAttribute
  public init(attribute: AnyAttribute)
  public init<V>(_ context: AttributeGraph.RuleContext<V>)
  public subscript<V>(attribute: AttributeGraph.Attribute<V>) -> V {
    unsafeAddress
  }
  public subscript<V>(weakAttribute: AttributeGraph.WeakAttribute<V>) -> V? {
    get
  }
  public subscript<V>(optionalAttribute: AttributeGraph.OptionalAttribute<V>) -> V? {
    get
  }
  public func valueAndFlags<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, flags: AGChangedValueFlags)
  public func changedValue<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, changed: Swift.Bool)
  public func update(body: () -> Swift.Void)
  public func unsafeCast<V>(to _: V.Type) -> AttributeGraph.RuleContext<V>
  public static func == (a: AttributeGraph.AnyRuleContext, b: AttributeGraph.AnyRuleContext) -> Swift.Bool
}
@frozen public struct RuleContext<Value> : Swift.Equatable {
  public var attribute: AttributeGraph.Attribute<Value>
  public init(attribute: AttributeGraph.Attribute<Value>)
  public subscript<V>(attribute: AttributeGraph.Attribute<V>) -> V {
    unsafeAddress
  }
  public subscript<V>(weakAttribute: AttributeGraph.WeakAttribute<V>) -> V? {
    get
  }
  public subscript<V>(optionalAttribute: AttributeGraph.OptionalAttribute<V>) -> V? {
    get
  }
  public var value: Value {
    unsafeAddress
    nonmutating set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public func valueAndFlags<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, flags: AGChangedValueFlags)
  public func changedValue<V>(of input: AttributeGraph.Attribute<V>, options: AGValueOptions = []) -> (value: V, changed: Swift.Bool)
  public func update(body: () -> Swift.Void)
  public static func == (a: AttributeGraph.RuleContext<Value>, b: AttributeGraph.RuleContext<Value>) -> Swift.Bool
}
@_silgen_name("AGGraphGetInputValue")
@inline(__always) @inlinable internal func AGGraphGetInputValue<Value>(_ attribute: AnyAttribute, input: AnyAttribute, options: AGValueOptions = [], type: Value.Type = Value.self) -> AGValue
@_silgen_name("AGGraphWithUpdate")
@inline(__always) @inlinable internal func AGGraphWithUpdate(_ attribute: AnyAttribute, body: () -> Swift.Void)
extension AnyWeakAttribute {
  @_alwaysEmitIntoClient public init(_ attribute: AnyAttribute?) {
        self = __AGCreateWeakAttribute(attribute ?? .nil)
    }
  @_alwaysEmitIntoClient public init<Value>(_ weakAttribute: AttributeGraph.WeakAttribute<Value>) {
        self = weakAttribute.base
    }
  @_alwaysEmitIntoClient public func unsafeCast<Value>(to _: Value.Type) -> AttributeGraph.WeakAttribute<Value> {
        WeakAttribute(base: self)
    }
  @_alwaysEmitIntoClient public var attribute: AnyAttribute? {
    get {
            let attribute = __AGWeakAttributeGetAttribute(self)
            return attribute == .nil ? nil : attribute
        }
    set {
            self = AnyWeakAttribute(newValue)
        }
  }
}
extension AnyWeakAttribute : Swift.Hashable {
  @_alwaysEmitIntoClient public static func == (lhs: AnyWeakAttribute, rhs: AnyWeakAttribute) -> Swift.Bool {
        lhs._details.identifier == rhs._details.identifier && lhs._details.seed == rhs._details.seed
    }
  @_alwaysEmitIntoClient public func hash(into hasher: inout Swift.Hasher) {
        hasher.combine(_details.identifier)
        hasher.combine(_details.seed)
    }
  @_alwaysEmitIntoClient public var hashValue: Swift.Int {
    get {
        _hashValue(for: self)
    }
  }
}
extension AnyWeakAttribute : Swift.CustomStringConvertible {
  @_alwaysEmitIntoClient public var description: Swift.String {
    get { attribute?.description ?? "nil" }
  }
}
@frozen @propertyWrapper @dynamicMemberLookup public struct WeakAttribute<Value> {
  @usableFromInline
  internal var base: AnyWeakAttribute
  @_alwaysEmitIntoClient public init(base: AnyWeakAttribute) {
        self.base = base
    }
  @_alwaysEmitIntoClient public init() {
        base = AnyWeakAttribute(_details: .init(identifier: .init(rawValue: 0), seed: 0))
    }
  @_alwaysEmitIntoClient public init(_ attribute: AttributeGraph.Attribute<Value>) {
        base = AnyWeakAttribute(attribute.identifier)
    }
  @_alwaysEmitIntoClient public init(_ attribute: AttributeGraph.Attribute<Value>?) {
        base = AnyWeakAttribute(attribute?.identifier)
    }
  @_alwaysEmitIntoClient public var wrappedValue: Value? {
    get {
        AGGraphGetWeakValue(base, type: Value.self)
            .value?
            .assumingMemoryBound(to: Value.self)
            .pointee
    }
  }
  @_alwaysEmitIntoClient public var projectedValue: AttributeGraph.Attribute<Value>? {
    get { attribute }
    set { attribute = newValue }
    _modify { yield &attribute }
  }
  @_alwaysEmitIntoClient public subscript<Member>(dynamicMember keyPath: Swift.KeyPath<Value, Member>) -> AttributeGraph.Attribute<Member>? {
    get {
        attribute?[keyPath: keyPath]
    }
  }
  @_alwaysEmitIntoClient public var attribute: AttributeGraph.Attribute<Value>? {
    get { base.attribute?.unsafeCast(to: Value.self) }
    set { base.attribute = newValue?.identifier }
  }
  @_alwaysEmitIntoClient public var value: Value? {
    get { wrappedValue }
  }
  @_alwaysEmitIntoClient public func changedValue(options: AGValueOptions) -> (value: Value, changed: Swift.Bool)? {
        let value = AGGraphGetWeakValue(base, options: options, type: Value.self)
        guard let ptr = value.value else {
            return nil
        }
        return (
            ptr.assumingMemoryBound(to: Value.self).pointee,
            value.flags.contains(.changed)
        )
    }
}
extension AttributeGraph.WeakAttribute : Swift.Hashable {
  public static func == (a: AttributeGraph.WeakAttribute<Value>, b: AttributeGraph.WeakAttribute<Value>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AttributeGraph.WeakAttribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_silgen_name("AGGraphGetWeakValue")
@_alwaysEmitIntoClient private func AGGraphGetWeakValue<Value>(_ attribute: AnyWeakAttribute, options: AGValueOptions = [], type: Value.Type = Value.self) -> AGWeakValue
extension Graph {
  public static func typeIndex(ctx: GraphContext, body: any AttributeGraph._AttributeBody.Type, valueType: Metadata, flags: _AttributeType.Flags, update: () -> (Swift.UnsafeMutableRawPointer, AnyAttribute) -> Swift.Void) -> Swift.Int
}
extension Graph {
  public static func withoutUpdate<V>(_ body: () -> V) -> V
  public func withoutSubgraphInvalidation<V>(_ body: () -> V) -> V
  public func withDeadline<V>(_: Swift.UInt64, _: () -> V) -> V
  public func onInvalidation(_ callback: @escaping (AnyAttribute) -> Swift.Void)
  public func onUpdate(_ callback: @escaping () -> Swift.Void)
  public func withMainThreadHandler(_: (() -> Swift.Void) -> Swift.Void, do: () -> Swift.Void)
}
extension Graph {
  @_transparent public func startProfiling() {
        __AGGraphStartProfiling(self)
    }
  @_transparent public func stopProfiling() {
        __AGGraphStopProfiling(self)
    }
  @_transparent public func resetProfile() {
        __AGGraphResetProfile(self)
    }
  public static func startProfiling()
  public static func stopProfiling()
  public static func resetProfile()
}
extension Graph {
  @_transparent public var mainUpdates: Swift.Int {
    @_transparent get { numericCast(counter(for: .mainThreadUpdates)) }
  }
}
extension Graph {
  @_silgen_name("AGGraphGetOutputValue")
  @inline(__always) @inlinable public static func outputValue<Value>() -> Swift.UnsafePointer<Value>?
  @_silgen_name("AGGraphSetOutputValue")
  @inline(__always) @inlinable public static func setOutputValue<Value>(_ value: Swift.UnsafePointer<Value>)
}
extension Graph {
  @_transparent public static func anyInputsChanged(excluding excludedInputs: [AnyAttribute]) -> Swift.Bool {
        return __AGGraphAnyInputsChanged(excludedInputs, excludedInputs.count)
    }
}
extension Graph {
  public func archiveJSON(name: Swift.String?)
}
extension Subgraph {
  public typealias Flags = AnyAttribute.Flags
  public typealias ChildFlags = AnyAttribute.Flags
}
extension Subgraph {
  public func addObserver(_ observer: @escaping () -> Swift.Void) -> Swift.Int
  public func apply<Value>(_ body: () -> Value) -> Value
  public func forEach(_ flags: Subgraph.Flags, _ callback: (AnyAttribute) -> Swift.Void)
}
extension Subgraph {
  public static func beginTreeElement<Value>(value: AttributeGraph.Attribute<Value>, flags: Swift.UInt32)
  public static func addTreeValue<Value>(_ value: AttributeGraph.Attribute<Value>, forKey key: Swift.UnsafePointer<Swift.Int8>, flags: Swift.UInt32)
  public static func endTreeElement<Value>(value: AttributeGraph.Attribute<Value>)
}
public func compareValues<Value>(_ lhs: Value, _ rhs: Value, mode: ComparisonMode = .equatableAlways) -> Swift.Bool
public func compareValues<Value>(_ lhs: Value, _ rhs: Value, options: ComparisonOptions) -> Swift.Bool
extension ComparisonOptions {
  public init(mode: ComparisonMode)
}
public func forEachField(of type: any Any.Type, do body: (Swift.UnsafePointer<Swift.Int8>, Swift.Int, any Any.Type) -> Swift.Void)
extension Metadata : Swift.Hashable, Swift.CustomStringConvertible {
  public init(_ type: any Any.Type)
  public var type: any Any.Type {
    get
  }
  public var description: Swift.String {
    get
  }
  public func forEachField(options: Metadata.ApplyOptions, do body: (Swift.UnsafePointer<Swift.Int8>, Swift.Int, any Any.Type) -> Swift.Bool) -> Swift.Bool
}
extension Signature : Swift.Equatable {
  public static func == (lhs: Signature, rhs: Signature) -> Swift.Bool
}
@discardableResult
public func withUnsafePointerToEnumCase<T>(of value: Swift.UnsafeMutablePointer<T>, do body: (Swift.Int, any Any.Type, Swift.UnsafeRawPointer) -> ()) -> Swift.Bool
@discardableResult
public func withUnsafeMutablePointerToEnumCase<T>(of value: Swift.UnsafeMutablePointer<T>, do body: (Swift.Int, any Any.Type, Swift.UnsafeMutableRawPointer) -> ()) -> Swift.Bool
extension TupleType {
  @_transparent public init(_ types: [any Any.Type]) {
        self.init(count: types.count, elements: types.map(Metadata.init))
    }
  @_transparent public init(_ type: any Any.Type) {
        self.init(rawValue: unsafeBitCast(type, to: UnsafePointer<_Metadata>.self))
    }
  @_transparent public var isEmpty: Swift.Bool {
    @_transparent get { count == 0 }
  }
  @_transparent public var indices: Swift.Range<Swift.Int> {
    @_transparent get { 0 ..< count }
  }
  @_transparent public var type: any Any.Type {
    @_transparent get {
        unsafeBitCast(rawValue, to: Any.Type.self)
    }
  }
  @_transparent public func type(at index: Swift.Int) -> any Any.Type {
        elementType(at: index).type
    }
  @_transparent public func offset<T>(at index: Swift.Int, as type: T.Type) -> Swift.Int {
        elementOffset(at: index, type: Metadata(type))
    }
  @_transparent public func setElement<T>(in tupleValue: Swift.UnsafeMutableRawPointer, at index: Swift.Int, from srcValue: Swift.UnsafePointer<T>, options: TupleType.CopyOptions) {
        __AGTupleSetElement(self, tupleValue, index, srcValue, Metadata(T.self), options)
    }
  @_transparent public func getElement<T>(in tupleValue: Swift.UnsafeMutableRawPointer, at index: Swift.Int, to dstValue: Swift.UnsafeMutablePointer<T>, options: TupleType.CopyOptions) {
        __AGTupleGetElement(self, tupleValue, index, dstValue, Metadata(T.self), options)
    }
}
@_silgen_name("AGTupleWithBuffer")
public func withUnsafeTuple(of type: TupleType, count: Swift.Int, _ body: (UnsafeMutableTuple) -> Swift.Void)
extension UnsafeTuple {
  @_transparent public var count: Swift.Int {
    @_transparent get { type.count }
  }
  @_transparent public var isEmpty: Swift.Bool {
    @_transparent get { type.isEmpty }
  }
  @_transparent public var indices: Swift.Range<Swift.Int> {
    @_transparent get { type.indices }
  }
  @_transparent public func address<T>(as _: T.Type = T.self) -> Swift.UnsafePointer<T> {
        guard type.type == T.self else {
            preconditionFailure()
        }
        return value.assumingMemoryBound(to: T.self)
    }
  @_transparent public func address<T>(of index: Swift.Int, as _: T.Type = T.self) -> Swift.UnsafePointer<T> {
        value.advanced(by: type.elementOffset(at: index, type: Metadata(T.self)))
            .assumingMemoryBound(to: T.self)
    }
  public subscript<T>() -> T {
    @_transparent unsafeAddress { address(as: T.self) }
  }
  public subscript<T>(index: Swift.Int) -> T {
    @_transparent unsafeAddress { address(of: index, as: T.self) }
  }
}
extension UnsafeMutableTuple {
  @_transparent public init(with tupleType: TupleType) {
        self.init(
            type: tupleType,
            value: UnsafeMutableRawPointer.allocate(
                byteCount: tupleType.size,
                alignment: -1
            )
        )
    }
  @_transparent public func initialize<T>(at index: Swift.Int, to element: T) {
        withUnsafePointer(to: element) { elementPointer in
            type.setElement(in: value, at: index, from: elementPointer, options: .initCopy)
        }
    }
  @_transparent public func deinitialize() {
        type.destroy(value)
    }
  @_transparent public func deinitialize(at index: Swift.Int) {
        type.destroy(value, at: index)
    }
  @_transparent public func deallocate(initialized: Swift.Bool) {
        if initialized {
            deinitialize()
        }
        value.deallocate()
    }
  @_transparent public var count: Swift.Int {
    @_transparent get { type.count }
  }
  @_transparent public var isEmpty: Swift.Bool {
    @_transparent get { type.isEmpty }
  }
  @_transparent public var indices: Swift.Range<Swift.Int> {
    @_transparent get { type.indices }
  }
  @_transparent public func address<T>(as _: T.Type = T.self) -> Swift.UnsafeMutablePointer<T> {
        guard type.type == T.self else {
            preconditionFailure()
        }
        return value.assumingMemoryBound(to: T.self)
    }
  @_transparent public func address<T>(of index: Swift.Int, as _: T.Type = T.self) -> Swift.UnsafeMutablePointer<T> {
        value.advanced(by: type.elementOffset(at: index, type: Metadata(T.self)))
            .assumingMemoryBound(to: T.self)
    }
  public subscript<T>() -> T {
    @_transparent unsafeAddress { UnsafePointer(address(as: T.self)) }
    @_transparent nonmutating unsafeMutableAddress { address(as: T.self) }
  }
  public subscript<T>(index: Swift.Int) -> T {
    @_transparent unsafeAddress { UnsafePointer(address(of: index, as: T.self)) }
    @_transparent nonmutating unsafeMutableAddress { address(of: index, as: T.self) }
  }
}
extension AttributeGraph.Attribute : Swift.Sendable {}
extension AttributeGraph.Attribute : Swift.BitwiseCopyable {}
extension AttributeGraph.External : Swift.Sendable {}
extension AttributeGraph.External : Swift.BitwiseCopyable {}
extension AttributeGraph.PointerOffset : Swift.Sendable {}
extension AttributeGraph.PointerOffset : Swift.BitwiseCopyable {}
extension AttributeGraph.IndirectAttribute : Swift.Sendable {}
extension AttributeGraph.IndirectAttribute : Swift.BitwiseCopyable {}
extension AttributeGraph.AnyOptionalAttribute : Swift.Sendable {}
extension AttributeGraph.AnyOptionalAttribute : Swift.BitwiseCopyable {}
extension AttributeGraph.OptionalAttribute : Swift.Sendable {}
extension AttributeGraph.OptionalAttribute : Swift.BitwiseCopyable {}
extension AttributeGraph.AnyRuleContext : Swift.Sendable {}
extension AttributeGraph.AnyRuleContext : Swift.BitwiseCopyable {}
extension AttributeGraph.RuleContext : Swift.Sendable {}
extension AttributeGraph.RuleContext : Swift.BitwiseCopyable {}
extension AttributeGraph.WeakAttribute : Swift.Sendable {}
extension AttributeGraph.WeakAttribute : Swift.BitwiseCopyable {}
